import secrets
import requests
import logging
from eth_account import Account
from web3 import Web3

logger = logging.getLogger(__name__)

class BSCWalletClient:
    def __init__(self, rpc_url: str, bscscan_api_key: str):
        self.w3 = Web3(Web3.HTTPProvider(rpc_url))
        self.api_key = bscscan_api_key
        Account.enable_unaudited_hdwallet_features()
        logger.info("üîó BSCWalletClient –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å RPC %s", rpc_url)

    @staticmethod
    def create_wallet() -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞"""
        private_key = "0x" + secrets.token_hex(32)
        account = Account.from_key(private_key)
        logger.info("üÜï –ù–æ–≤—ã–π –∫–æ—à–µ–ª—ë–∫ —Å–æ–∑–¥–∞–Ω: %s", account.address)
        return {
            "address": account.address,
            "private_key": private_key
        }

    def get_token_transactions(self, address: str, token_contract: str = None) -> list:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Ç–æ–∫–µ–Ω-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ –∞–¥—Ä–µ—Å—É"""
        logger.debug("üì• –ó–∞–ø—Ä–æ—Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –¥–ª—è –∞–¥—Ä–µ—Å–∞ %s", address)
        url = "https://api.bscscan.com/api"
        params = {
            "module": "account",
            "action": "tokentx",
            "address": address,
            "startblock": 1,
            "endblock": 99999999,
            "sort": "desc",
            "apikey": self.api_key
        }
        try:
            resp = requests.get(url, params=params, timeout=10)
            data = resp.json()
            if data.get("status") != "1":
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç BscScan: %s", data.get("message"))
                return []

            result = data.get("result", [])
            if token_contract:
                filtered = [
                    tx for tx in result
                    if tx["contractAddress"].lower() == token_contract.lower()
                    and tx["to"].lower() == address.lower()
                ]
                logger.info("üîç –ù–∞–π–¥–µ–Ω–æ %d –≤—Ö–æ–¥—è—â–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ —Ç–æ–∫–µ–Ω—É %s", len(filtered), token_contract)
                return filtered

            logger.info("üîç –ù–∞–π–¥–µ–Ω–æ %d —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ —Ç–æ–∫–µ–Ω—É", len(result))
            return result
        except Exception as e:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ BscScan: %s", e)
            return []

    def get_balance(self, address: str) -> float:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ BNB-–±–∞–ª–∞–Ω—Å–∞"""
        try:
            checksummed = self.w3.to_checksum_address(address)
            balance_wei = self.w3.eth.get_balance(checksummed)
            balance = self.w3.from_wei(balance_wei, 'ether')
            logger.info("üí∞ –ë–∞–ª–∞–Ω—Å %s: %.6f BNB", address, balance)
            return balance
        except Exception as e:
            logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: %s", e)
            return 0.0