from sqlalchemy import inspect, text, select

from database.entities.core import Base, Database
from database.controller.users_orm import UsersORM
from database.controller.products_orm import ProductsORM
from database.controller.subscriptions_orm import SubscriptionsORM
from database.controller.transactions_orm import TransactionsORM
from database.db_utils import session_manager
from utils.logger import setup_logger

logger = setup_logger(__name__)


class ORMController:
    def __init__(self, db: Database = Database()):
        self.db = db
        self.users = UsersORM(self)
        self.products = ProductsORM(self)
        self.subscriptions = SubscriptionsORM(self)
        self.transactions = TransactionsORM(self)
        logger.info("ORMController initialized")

    async def create_tables(self):
        async with self.db.async_engine.begin() as conn:

            def sync_inspect(connection):
                inspector = inspect(connection)
                return inspector.get_table_names()

            logger.info(f"üîç –ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db.async_engine.url.database}")

            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))

            existing_tables = await conn.run_sync(sync_inspect)
            logger.info(f"üìå –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã: {existing_tables}")

            found_metadata_tables = [
                name.split(".")[-1]  # —É–±–∏—Ä–∞–µ–º 'public.' –∏–∑ 'public.users'
                for name in Base.metadata.tables.keys()
            ]
            logger.info(f"üìÇ –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤ metadata: {found_metadata_tables}")

            if existing_tables and set(existing_tables) != set(found_metadata_tables):
                logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –º–æ–¥–µ–ª—è—Ö! –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")

                await conn.run_sync(Base.metadata.drop_all)
                logger.info("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã!")

                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω—ã!")

            elif not existing_tables:
                logger.info("üîß –¢–∞–±–ª–∏—Ü—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç, —Å–æ–∑–¥–∞–µ–º –∏—Ö...")
                await conn.run_sync(Base.metadata.create_all)
                logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
            else:
                logger.info("‚úÖ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ë–î –∞–∫—Ç—É–∞–ª—å–Ω–∞, –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è.")

    async def drop_tables(self):
        async with self.db.async_engine.begin() as conn:
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))
            await conn.run_sync(Base.metadata.drop_all)
            logger.warning("üóëÔ∏è –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —É–¥–∞–ª–µ–Ω—ã –≤—Ä—É—á–Ω—É—é!")

    async def truncate_tables(self):
        async with self.db.async_engine.begin() as conn:
            await conn.run_sync(lambda c: c.execute(text("SET search_path TO public")))
            tables = Base.metadata.sorted_tables
            for table in tables:
                await conn.execute(text(f'TRUNCATE TABLE "{table.name}" RESTART IDENTITY CASCADE'))
            logger.info("üßπ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã –æ—á–∏—â–µ–Ω—ã (TRUNCATE).")

    @session_manager
    async def init_demo_products(self, session):
        from database.entities.models import Product

        existing = await session.execute(select(Product))
        if existing.scalars().first():
            return  # —É–∂–µ –µ—Å—Ç—å

        products = [
            Product(
                name="–ó–∞–∫—Ä—ã—Ç—ã–π –ö–æ–ø–∏ –¢—Ä–µ–π–¥–∏–Ω–≥",
                description="ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è —Å –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ–º —Å–¥–µ–ª–æ–∫ –∞–ª–≥–æ—Ç—Ä–µ–π–¥–µ—Ä–æ–≤.",
                price_usdt=250.0,
                duration_days=365,
                is_active=True
            ),
            Product(
                name="‚ö†Ô∏è –í—ã—Å–æ–∫–æ-—Ä–∏—Å–∫–æ–≤–∞–Ω–Ω—ã–π —Å–∏–≥–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç",
                description="üî• –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π —Ä—É—á–Ω–æ–π —Ç–æ—Ä–≥–æ–≤–ª–∏. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –æ–ø—ã—Ç–Ω—ã—Ö —Ç—Ä–µ–π–¥–µ—Ä–æ–≤.",
                price_usdt=300.0,
                duration_days=100,
                is_active=False
            ),
            Product(
                name="üß† –ë–æ—Ç –∫—Ä–∏–ø—Ç–æ –û–ü–¶–ò–û–ù–û–í",
                description="–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ",
                price_usdt=350.0,
                duration_days=150,
                is_active=False
            ),
            Product(
                name="‚ö°Ô∏è –ú–∞–π–Ω–∏–Ω–≥ –ë–£–£–£–£–°–¢",
                description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ —É—Å–∫–æ—Ä–µ–Ω–∏–µ –º–∞–π–Ω–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ –Ω–∞—à —Å–µ—Ä–≤–∏—Å.",
                price_usdt=400.0,
                duration_days=200,
                is_active=True
            ),
            Product(
                name="üß© –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞—Ç–µ–≥–∏—è",
                description="–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ç—Ä–µ–π–¥–∏–Ω–≥—É. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.",
                price_usdt=1.0,
                duration_days=1,
                is_active=True
            ),
            Product(
                name="üîí –°–µ–∫—Ä–µ—Ç–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞",
                description="–°–∫–æ—Ä–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ.",
                price_usdt=14.0,
                duration_days=1,
                is_active=False
            ),
            Product(
                name="‚öôÔ∏è –ü–æ–º–æ—â—å —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è",
                description="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏/—Ä–∞–∑–º–µ—â–µ–Ω–∏–∏ –º–∞–π–Ω–∏–Ω–≥–∞.",
                price_usdt=35.0,
                duration_days=1,
                is_active=True
            ),
            Product(
                name="üíª –ö—É–ø–∏—Ç—å –º–∞–π–Ω–∏–Ω–≥ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ",
                description="–ü—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ–º –∏ –ø–æ–º–æ–∂–µ–º –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ. –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É.",
                price_usdt=100000.0,
                duration_days=365,
                is_active=True
            ),
        ]

        session.add_all(products)


