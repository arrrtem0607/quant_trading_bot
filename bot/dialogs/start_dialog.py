import random

from aiogram import Bot
from aiogram.types import ChatMember, ChatMemberMember, ChatMemberOwner, ChatMemberAdministrator, CallbackQuery, Message
from aiogram_dialog import Dialog, Window, DialogManager, StartMode
from aiogram_dialog.widgets.kbd import Button, Row, Group, Url
from aiogram_dialog.widgets.text import Const, Format
from aiogram_dialog.widgets.input import TextInput, ManagedTextInput
from redis.asyncio import Redis

from bot.utils.statesforms import StartDialog, MainMenu
from database.controller.orm_instance import orm_instance as orm
from bot.lexicon.lexicon_ru import LEXICON_RU
from utils.logger import setup_logger

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# Redis –∏ –∫–æ–Ω—Ñ–∏–≥
redis = Redis(host="localhost")
logger = setup_logger(__name__)
MAX_ATTEMPTS = 3
BLOCK_MINUTES_RANGE = (5, 15)
REQUIRED_CHANNEL = -1002382539061

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–æ–π –∫–∞–ø—á–∏
def generate_captcha() -> tuple[str, int]:
    a = random.randint(1, 20)
    b = random.randint(1, 20)
    if random.choice(["+", "-"]) == "+":
        return f"{a} + {b}", a + b
    else:
        return f"{a} - {b}", a - b

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –í—ã–±–æ—Ä —è–∑—ã–∫–∞
async def on_language_selected(_: CallbackQuery, button: Button, manager: DialogManager):
    lang = "ru" if button.widget_id == "lang_ru" else "en"
    user_id = manager.event.from_user.id
    logger.info(f"[LANGUAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–±—Ä–∞–ª —è–∑—ã–∫: {lang}")

    await orm.users.update_language(user_id, lang)
    user = await orm.users.get_user(user_id)

    if user and user.terms_accepted_at:
        logger.info(f"[LANGUAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–∂–µ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await manager.start(MainMenu.main, mode=StartMode.RESET_STACK)
    else:
        logger.info(f"[LANGUAGE] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è, –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∫–∞–ø—á–µ")
        await manager.switch_to(StartDialog.captcha)

language_window = Window(
    Const(LEXICON_RU["language_prompt"]),
    Row(
        Button(Const("üá∑üá∫ –†—É—Å—Å–∫–∏–π"), id="lang_ru", on_click=on_language_selected),
        Button(Const("üá∫üá∏ English"), id="lang_en", on_click=on_language_selected),
    ),
    state=StartDialog.language_select,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
async def captcha_getter(dialog_manager: DialogManager, **kwargs) -> dict:
    user_id = dialog_manager.event.from_user.id

    if await redis.get(f"captcha_block:{user_id}"):
        return {"captcha_expr": "üîí"}  # –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–≥–ª—É—à–µ—á–Ω—ã–π —Ç–µ–∫—Å—Ç

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–ø—á–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞—Ö–æ–¥–µ
    if "captcha_expr" not in dialog_manager.dialog_data:
        expr, answer = generate_captcha()
        dialog_manager.dialog_data["captcha_expr"] = expr
        dialog_manager.dialog_data["captcha_answer"] = answer
        dialog_manager.dialog_data["captcha_attempts"] = 0

    return {
        "captcha_expr": dialog_manager.dialog_data["captcha_expr"]
    }

# –£—Å–ø–µ—à–Ω—ã–π –≤–≤–æ–¥ —á–∏—Å–ª–∞
async def on_captcha_success(
    message: Message,
    widget: ManagedTextInput[int],
    dialog_manager: DialogManager,
    data: int,
) -> None:
    user_id = message.from_user.id
    correct = dialog_manager.dialog_data.get("captcha_answer")
    logger.info(f"[CAPTCHA] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤—ë–ª {data}, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}")


    if data == correct:
        logger.info(f"[CAPTCHA] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∫–∞–ø—á—É")
        await dialog_manager.switch_to(StartDialog.terms)
    else:
        attempts = dialog_manager.dialog_data.get("captcha_attempts", 0) + 1
        dialog_manager.dialog_data["captcha_attempts"] = attempts
        logger.warning(f"[CAPTCHA] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—ã—Ç–∫–∞ {attempts}/{MAX_ATTEMPTS}")

        if attempts >= MAX_ATTEMPTS:
            minutes = random.randint(*BLOCK_MINUTES_RANGE)
            await redis.set(f"captcha_block:{user_id}", "1", ex=minutes * 60)
            await message.answer(LEXICON_RU["captcha_failed"].format(minutes=minutes))
            await dialog_manager.switch_to(StartDialog.blocked)
        else:
            await message.answer(LEXICON_RU["captcha_wrong"].format(tries_left=MAX_ATTEMPTS - attempts))


# –û—à–∏–±–∫–∞: –Ω–µ —á–∏—Å–ª–æ
async def on_captcha_error(
    message: Message,
    widget: ManagedTextInput[int],
    dialog_manager: DialogManager,
    error: ValueError,
) -> None:
    await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")

captcha_window = Window(
    Format(LEXICON_RU["captcha_question"], when="captcha_expr"),
    TextInput(
        id="captcha_input",
        type_factory=int,
        on_success=on_captcha_success,
        on_error=on_captcha_error,
    ),
    state=StartDialog.captcha,
    getter=captcha_getter,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –ü—Ä–∏–Ω—è—Ç–∏–µ —É—Å–ª–æ–≤–∏–π
async def on_terms_accepted(_: CallbackQuery, __: Button, manager: DialogManager):
    user_id = manager.event.from_user.id
    await orm.users.confirm_terms(user_id)
    logger.info(f"[TERMS] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø—Ä–∏–Ω—è–ª —É—Å–ª–æ–≤–∏—è. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏.")
    await manager.switch_to(StartDialog.subscription_check)

terms_window = Window(
    Const(LEXICON_RU["terms_text"]),
    Group(
        Url(Const(LEXICON_RU["terms_read_btn"]), url=Const(LEXICON_RU["terms_url"])),
        Button(Const(LEXICON_RU["terms_accept"]), id="accept", on_click=on_terms_accepted),
        width=1
    ),
    state=StartDialog.terms,
)

async def blocked_getter(dialog_manager: DialogManager, **kwargs) -> dict:
    user_id = dialog_manager.event.from_user.id
    ttl = await redis.ttl(f"captcha_block:{user_id}")
    return {"ttl": max(ttl, 0)}

async def on_retry(_: CallbackQuery, __: Button, manager: DialogManager):
    user_id = manager.event.from_user.id
    ttl = await redis.ttl(f"captcha_block:{user_id}")
    if ttl <= 0:
        await manager.switch_to(StartDialog.captcha)
    else:
        await manager.switch_to(StartDialog.blocked)

blocked_window = Window(
    Format("‚è≥ –í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã.\n"
           "–û—Å—Ç–∞–ª–æ—Å—å: <b>{ttl}</b> —Å–µ–∫.\n\n"
           "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞."),
    Button(Const("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ"), id="retry", on_click=on_retry),
    state=StartDialog.blocked,
    getter=blocked_getter,
)

async def check_subscription(user_id: int, bot: Bot) -> bool:
    try:
        member: ChatMember = await bot.get_chat_member(REQUIRED_CHANNEL, user_id)
        #logger.info(f"[SUBSCRIPTION][API] –û—Ç–≤–µ—Ç get_chat_member –¥–ª—è {user_id} –≤ {REQUIRED_CHANNEL}: {member}")
        return isinstance(member, (ChatMemberMember, ChatMemberOwner, ChatMemberAdministrator))
    except Exception as e:
        #logger.warning(f"[SUBSCRIPTION][ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

async def subscription_getter(dialog_manager: DialogManager, **kwargs):
    user_id = dialog_manager.event.from_user.id
    bot = dialog_manager.middleware_data["bot"]

    is_subscribed = await check_subscription(user_id, bot)
    return {"is_subscribed": is_subscribed}

async def on_check_subscription(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_id = callback.from_user.id
    bot = manager.middleware_data["bot"]
    logger.info(f"[SUBSCRIPTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É'")

    subscribed = await check_subscription(user_id, bot)
    if subscribed:
        logger.info(f"[SUBSCRIPTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω ‚Äî –ø–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", show_alert=True)
        await manager.start(MainMenu.main, mode=StartMode.RESET_STACK)
    else:
        logger.warning(f"[SUBSCRIPTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å", show_alert=True)

async def on_continue_after_subscription(callback: CallbackQuery, button: Button, manager: DialogManager):
    user_id = callback.from_user.id
    bot = manager.middleware_data["bot"]
    logger.info(f"[SUBSCRIPTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–∞–∂–∞–ª '–î–ê–õ–ï–ï'")

    if await check_subscription(user_id, bot):
        logger.info(f"[SUBSCRIPTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω. –ü–µ—Ä–µ—Ö–æ–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
        await manager.start(MainMenu.main, mode=StartMode.RESET_STACK)
    else:
        logger.warning(f"[SUBSCRIPTION] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω. –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–µ—Ä–µ—Ö–æ–¥.")
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è", show_alert=True)

subscription_window = Window(
    Const("üì¢ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:"),
    Group(
        Url(Const("üì≤ –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª"), url=Const("https://t.me/+spOjqukB9iI1NzRi")),
        Button(Const("üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É"), id="check_sub", on_click=on_check_subscription),
        width=1
    ),
    state=StartDialog.subscription_check,
)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –§–∏–Ω–∞–ª—å–Ω—ã–π –¥–∏–∞–ª–æ–≥
start_dialog = Dialog(
    language_window,
    captcha_window,
    blocked_window,
    terms_window,
    subscription_window,  # üëà –¥–æ–±–∞–≤–ª–µ–Ω–æ
)
